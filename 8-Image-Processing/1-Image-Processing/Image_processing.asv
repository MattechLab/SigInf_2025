% Load and resize the image
img = imread('grace_hopper.jpg'); % Make sure the file is in the same directory or provide the full path
if size(img, 3) == 3
    img = rgb2gray(img); % Convert to grayscale if the image is in color
end

% Set up the figure with two side-by-side subplots
figure;

% Left subplot: Display the grayscale image in high quality
subplot(1, 2, 1);
imshow(img, []); % Display the original image in high resolution
title('Grayscale Image', 'FontSize', 12, 'Color', 'black');
axis equal;
axis off;

% Right subplot: Display pixel intensity values on a black background with less density
subplot(1, 2, 2);
imagesc(zeros(size(img))); % Display a black background of the same size as the original image
colormap('gray'); % Gray colormap for reference (will not affect black background)
axis equal; % Keep axes proportional for a square display
axis off; % Hide axes
hold on;

% Add color bar with a smaller width
c = colorbar;
caxis([0 255]); % Set color bar range for grayscale intensity
set(c, 'Position', [0.92, 0.1, 0.02, 0.8]); % Adjust the color bar to be narrower and positioned

% Set a larger step size and adjust font size for fewer displayed values
step = 50; % Increase step size to display fewer values
font_size = 8;

% Display pixel intensity values in green on black background
for i = 1:step:size(img, 1)
    for j = 1:step:size(img, 2)
        pixel_value = img(i, j);
        rectangle('Position', [j - step/2, i - step/2, step, step], 'EdgeColor', 'none', 'FaceColor', 'black'); % Create black squares
        text(j, i, num2str(pixel_value), 'Color', 'green', 'FontSize', font_size, ...
             'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle');
    end
end

% Adjust the title of the right subplot in black without "green on black" text
title('Pixel Intensity Values', 'Color', 'black', 'FontSize', 12);
hold off;

% Adjust the positions of the subplots to align the two images symmetrically
set(subplot(1, 2, 1), 'Position', [0.1, 0.1, 0.4, 0.8]); % Position of the left subplot
set(subplot(1, 2, 2), 'Position', [0.55, 0.1, 0.35, 0.8]); % Position of the right subplot

%% RGB Display with Pixel Intensity Values and Separate Color Channel Views

% Load the high-quality RGB image
img = imread('grace_hopper_RGB.jpg'); % Load RGB image (ensure the image file is in the same directory or provide the full path)

% First Figure with Pixel Intensity Values on Black Background
figure;

% Display the high-quality original RGB image in the first subplot
subplot(1, 4, 1);
imshow(img);
title('RGB Image', 'FontSize', 12);

% Resize image data for better readability in the channel subplots
resized_img = imresize(img, [80, 80]);

% Define step size for pixel display and font size for text
step = 10; % Adjust this to control sparsity of displayed pixels
fontSize = 7;

% Red Channel
subplot(1, 4, 2);
imshow(zeros(size(resized_img))); % Black background
hold on;
for i = 1:step:size(resized_img, 1)
    for j = 1:step:size(resized_img, 2)
        redVal = resized_img(i, j, 1); % Red channel value
        text(j, i, sprintf('%d', redVal), ...
            'Color', [1, 0, 0], ... % Red color text
            'FontSize', fontSize, ...
            'HorizontalAlignment', 'center');
    end
end
title('Red Channel', 'Color', 'red', 'FontSize', 12);
axis off;
hold off;

% Green Channel
subplot(1, 4, 3);
imshow(zeros(size(resized_img))); % Black background
hold on;
for i = 1:step:size(resized_img, 1)
    for j = 1:step:size(resized_img, 2)
        greenVal = resized_img(i, j, 2); % Green channel value
        text(j, i, sprintf('%d', greenVal), ...
            'Color', [0, 1, 0], ... % Green color text
            'FontSize', fontSize, ...
            'HorizontalAlignment', 'center');
    end
end
title('Green Channel', 'Color', 'green', 'FontSize', 12);
axis off;
hold off;

% Blue Channel
subplot(1, 4, 4);
imshow(zeros(size(resized_img))); % Black background
hold on;
for i = 1:step:size(resized_img, 1)
    for j = 1:step:size(resized_img, 2)
        blueVal = resized_img(i, j, 3); % Blue channel value
        text(j, i, sprintf('%d', blueVal), ...
            'Color', [0, 0, 1], ... % Blue color text
            'FontSize', fontSize, ...
            'HorizontalAlignment', 'center');
    end
end
title('Blue Channel', 'Color', 'blue', 'FontSize', 12);
axis off;
hold off;

% Adjust layout
set(gcf, 'Position', [100, 100, 1400, 400]); % Resize figure for better viewing

%% Second Figure with Each Color Channel Displayed Separately in its Original Color

% Convert the image to double precision
img_double = im2double(img);

% Separate each channel and prepare images for each color
red_channel_img = cat(3, img_double(:, :, 1), zeros(size(img_double, 1), size(img_double, 2)), zeros(size(img_double, 1), size(img_double, 2)));
green_channel_img = cat(3, zeros(size(img_double, 1), size(img_double, 2)), img_double(:, :, 2), zeros(size(img_double, 1), size(img_double, 2)));
blue_channel_img = cat(3, zeros(size(img_double, 1), size(img_double, 2)), zeros(size(img_double, 1), size(img_double, 2)), img_double(:, :, 3));

% Display each channel in its original color
figure;

% Red Channel in red color
subplot(1, 3, 1);
imshow(red_channel_img);
title('Red Channel', 'Color', 'red', 'FontSize', 12);

% Green Channel in green color
subplot(1, 3, 2);
imshow(green_channel_img);
title('Green Channel', 'Color', 'green', 'FontSize', 12);

% Blue Channel in blue color
subplot(1, 3, 3);
imshow(blue_channel_img);
title('Blue Channel', 'Color', 'blue', 'FontSize', 12);

% Adjust layout for the new figure
set(gcf, 'Position', [150, 150, 1200, 400]);

%% Noise 

%% Load and Convert RGB Image to Grayscale
img = imread('grace_hopper_RGB.jpg'); % Load the RGB image
gray_img = rgb2gray(img); % Convert to grayscale

% Display original grayscale image
figure;
subplot(1, 3, 1);
imshow(gray_img);
title('Original Grayscale Image', 'FontSize', 12);

%% Add Gaussian Noise
sigma = 0.05; % Standard deviation of Gaussian noise
gaussian_noisy_img = imnoise(im2double(gray_img), 'gaussian', 0, sigma);

% Display grayscale image with Gaussian noise
subplot(1, 3, 2);
imshow(gaussian_noisy_img);
title('With Gaussian Noise', 'FontSize', 12);

%% Add Salt-and-Pepper Noise
density = 0.05; % Noise density for salt-and-pepper
sp_noisy_img = imnoise(gray_img, 'salt & pepper', density);

% Display grayscale image with Salt-and-Pepper noise
subplot(1, 3, 3);
imshow(sp_noisy_img);
title('With Salt-and-Pepper Noise', 'FontSize', 12);

%% Image processing techniques
%% Load a Low-Contrast Image
img = imread('low_contrast_imag.jpg'); % Replace with an actual low-contrast image
if size(img, 3) == 3
    img = rgb2gray(img); % Convert to grayscale if it's an RGB image
end

%% Display Original Image and Histogram
figure;

% Original image
subplot(2, 3, 1);
imshow(img);
title('Original Image', 'FontSize', 12);

% Original histogram
subplot(2, 3, 4);
[counts_original, bins] = imhist(img);
bar(bins, counts_original, 'FaceColor', [0, 0, 1], 'EdgeColor', [0, 0, 1]); % Blue histogram
title('Original Histogram', 'FontSize', 10);
xlim([0, 255]); % Set the same x-axis range for both histograms
ylim([0, max(counts_original) * 1.1]); % Match y-axis range (with slight padding)

%% Apply Histogram Equalization
enhanced_img = histeq(img);

% Display Enhanced Image and Histogram
% Enhanced image
subplot(2, 3, 2);
imshow(enhanced_img);
title('Enhanced Image', 'FontSize', 12);

% Enhanced histogram
subplot(2, 3, 5);
[counts_enhanced, ~] = imhist(enhanced_img);
bar(bins, counts_enhanced, 'FaceColor', [0, 0, 1], 'EdgeColor', [0, 0, 1]); % Blue histogram
title('Enhanced Histogram', 'FontSize', 10);
xlim([0, 255]); % Set the same x-axis range
ylim([0, max(counts_original) * 1.1]); % Match y-axis range (based on the original histogram)

%% Mapping Function (Straight Line)
% Compute the cumulative distribution function (CDF) for the original image
cdf = cumsum(counts_original) / numel(img);

% Plot the mapping function
subplot(2, 3, 3);
plot(bins, cdf, 'r', 'LineWidth', 2); % CDF in red
hold on;
plot(bins, bins / max(bins), 'b--', 'LineWidth', 1); % Reference line for identity mapping in blue dashed
title('Mapping Function', 'FontSize', 10);
xlabel('Input Intensity');
ylabel('Output Intensity');
legend('CDF Mapping', 'Identity Line', 'Location', 'southeast');
grid on;

% Adjust layout
set(gcf, 'Position', [100, 100, 1200, 600]); % Resize figure for better viewing

%% Filtering in the spatial domain: smoothing
%% Mean filtering
% Load the Grace Hopper image (RGB)
img = imread('grace_hopper_RGB.jpg'); % Replace with the actual image file path

% Convert the image to grayscale for simplicity
gray_img = rgb2gray(img);

% Define a 3x3 mean filter kernel
mean_kernel = ones(3, 3) / 9;

% Smooth the original grayscale image using the mean filter
smoothed_original = imfilter(gray_img, mean_kernel, 'replicate');

% Apply Gaussian blur to the grayscale image (as done before)
gaussian_blurred = imgaussfilt(gray_img, 2); % Standard deviation of 2

% Smooth the Gaussian-blurred image using the mean filter
smoothed_gaussian = imfilter(gaussian_blurred, mean_kernel, 'replicate');

% Plot the results
figure;

% Original grayscale image
subplot(2, 3, 1);
imshow(gray_img);
title('Original Grayscale Image', 'FontSize', 12);

% Histogram of original grayscale image
subplot(2, 3, 4);
imhist(gray_img);
title('Histogram (Original)', 'FontSize', 10);

% Smoothed original image
subplot(2, 3, 2);
imshow(smoothed_original);
title('Smoothed Original (Mean Filter)', 'FontSize', 12);

% Histogram of smoothed original image
subplot(2, 3, 5);
imhist(smoothed_original);
title('Histogram (Smoothed Original)', 'FontSize', 10);

% Smoothed Gaussian-blurred image
subplot(2, 3, 3);
imshow(smoothed_gaussian);
title('Smoothed Gaussian (Mean Filter)', 'FontSize', 12);

% Histogram of smoothed Gaussian-blurred image
subplot(2, 3, 6);
imhist(smoothed_gaussian);
title('Histogram (Smoothed Gaussian)', 'FontSize', 10);

% Adjust layout for better visibility
set(gcf, 'Position', [100, 100, 1400, 600]);
